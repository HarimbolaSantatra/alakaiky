#!/usr/bin/env python

import subprocess
import argparse
import yaml
import logging

with open('config.yaml', 'r') as conf_file:
    conf = yaml.safe_load(conf_file)
    USERNAME = conf["username"]
    IP = conf["ip"]
    REMOTE_HOME = conf["remote_home"]

REMOTE_REF = "{}@{}".format(USERNAME, IP)


def exec_on_remote(
        cmds: list, 
        dry_run=False,
        debug=False,
        is_root=True
        ):
    """execute a sets of command on a remote host"""
    if debug:
        logging.basicConfig(level=logging.DEBUG)
        logging.debug("Beginning execution on remote ...")
    remote_cmd = ""
    iteration = 0
    nb_cmd = len(cmds)
    for cmd in cmds:
        remote_cmd += "sudo " + cmd if is_root else cmd
        iteration += 1
        if iteration != nb_cmd:
            remote_cmd += " && "
    remote_cmd = "ssh -t {0} \"{1}\"".format(
            REMOTE_REF,
            remote_cmd
            )
    dry_run_cmd = "Command to run: {}".format(remote_cmd)
    logging.debug(dry_run_cmd)
    if dry_run:
        print(dry_run_cmd)
    elif not debug:
        subprocess.run(remote_cmd, shell=True, check=False)


def push(remote_files: list, dests: list, dry_run=False, debug=False, is_root=True):
    """
    Sync local file to remote destination.
    files: local files
    dests: destination folders
    """

    files: str = " ".split(str(x) for x in remote_files)

    # sync to REMOTE_HOME first
    rsync_cmd = "rsync -aP {0} {1}".format(
            files,
            "{}:{}".format(REMOTE_REF, REMOTE_HOME)
            )

    # ... then sync to remote root folder: dest
    rsync_cmd = ""
    for i in range(len(dests)):
        rsync_cmd += "sudo rsync -aP {0} {1}".format(
                "{}/{}".format(REMOTE_HOME, files[i]),
                dests[i]
                )
    exec_on_remote([rsync_cmd], dry_run=dry_run, debug=debug, is_root=is_root)


    if debug:
        logging.basicConfig(level=logging.DEBUG)
        logging.debug("Remote files to copy: {}".format(files))
    else:
        exec_on_remote([rsync_cmd], debug=debug, is_root=is_root)


def pull(
        remote_files: list,
        debug=False,
        is_root=True
        ):
    """ 
    Retrieve files on remote server and put it into the current alk_dest directory
    remote_files: a list of full files path
    """
    for files in remote_files:
        if debug:
            logging.basicConfig(level=logging.DEBUG)
            logging.debug("Remote files to copy: {}".format(files))
        else:
            subprocess.run(rsync_cmd)


def bad_test():
    root_location = "/var/ossec"
    # /var/ossec is not readable for non-root user
    pass


def main():
    # Set parser
    parser = argparse.ArgumentParser(description="Copy files with remote and local environment")
    parser.add_argument("-n", "--dry-run",
                        dest="dry_run",
                        help=f"Do not execute. Instead, execute a dry-run",
                        action="store_true")
    parser.add_argument("-d", "--debug",
                        help=f"Test and debugging purposes",
                        action="store_true")
    args = parser.parse_args()

    if args.debug:
        log_level = logging.DEBUG
    else:
        log_level = logging.WARNING
    logging.basicConfig(level=log_level)
    logging.debug("Configuration done.")
    logging.debug("REMOTE_HOME is " + REMOTE_HOME)
    logging.debug("IP is " + IP)
    logging.debug("USERNAME is " + USERNAME)


    cmds = [
            "ls -lh /var/ossec"
            ]

    exec_on_remote(cmds, debug=args.debug, dry_run=args.dry_run)


if __name__ == '__main__':
    main()
